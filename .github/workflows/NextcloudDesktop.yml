name: Build Nextcloud Desktop (Windows, Qt6, Multi-lang)

on:
  workflow_dispatch:
    inputs:
      desktop_ref:
        description: "Nextcloud Desktop 构建分支或标签 (e.g., v3.13.1 或 master)"
        required: false
        default: "master"
      build_msi:
        description: "是否打包 MSI (需要 WiX)"
        required: false
        default: "true"
      sign_binaries:
        description: "是否代码签名 (需要 Secrets: WINDOWS_SIGNING_CERT_B64 / WINDOWS_SIGNING_CERT_PASS)"
        required: false
        default: "false"

jobs:
  build-win:
    runs-on: windows-2022
    env:
      CRAFT_ROOT: C:\CraftRoot
      BUILD_DIR: ${{ github.workspace }}\build
      DESKTOP_SRC: ${{ github.workspace }}\desktop
      CLIENT_BUILDING: ${{ github.workspace }}\client-building

    steps:
      - name: Checkout CI repo
        uses: actions/checkout@v4

      - name: Install basic tools (Chocolatey)
        shell: powershell
        run: |
          choco install -y git cmake ninja 7zip inkscape
          if ('${{ github.event.inputs.build_msi }}' -eq 'true') {
            choco install -y wixtoolset
          }

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Restore Craft cache
        uses: actions/cache@v4
        id: craft-cache
        with:
          path: |
            ${{ env.CRAFT_ROOT }}\download
            C:\Users\runneradmin\AppData\Local\craft
          key: craft-${{ runner.os }}-qt6-${{ hashFiles('**/blueprints.lock', '**/craft.lock') }}
          restore-keys: |
            craft-${{ runner.os }}-qt6-

      - name: Install Craft (unattended)
        if: steps.craft-cache.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          $craftScript = "$env:TEMP\install_craft.ps1"
          Invoke-WebRequest -Uri "https://raw.githubusercontent.com/KDE/craft/master/setup/install_craft.ps1" -OutFile $craftScript
          powershell -NoProfile -ExecutionPolicy Bypass -File $craftScript `
            -root "$env:CRAFT_ROOT" `
            -use-defaults
          New-Item -ItemType File -Force -Path craft.lock | Out-Null

      - name: Init Craft & configure MinGW target
        shell: powershell
        run: |
          & "$env:CRAFT_ROOT\etc\craftenv.ps1"
          craft config --set target x86_64-w64-mingw32
          craft --version
          craft --add-blueprint-repository https://github.com/nextcloud/desktop-client-blueprints.git
          craft --install-deps nextcloud-client

      - name: Checkout Nextcloud Desktop source
        uses: actions/checkout@v4
        with:
          repository: nextcloud/desktop
          ref: ${{ github.event.inputs.desktop_ref }}
          path: desktop
          submodules: true

      - name: Configure MSVC env (VS2022 x64)
        shell: pwsh
        run: |
          $vsVars = "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat"
          if (Test-Path $vsVars) {
            cmd /c "`"$vsVars`" x64 && set" | Out-String | Invoke-Expression
          }

      - name: CMake configure (Ninja, RelWithDebInfo)
        shell: pwsh
        run: |
          mkdir -Force $env:BUILD_DIR
          cd $env:BUILD_DIR
          cmake -G Ninja `
            -DCMAKE_BUILD_TYPE=RelWithDebInfo `
            -DCMAKE_PREFIX_PATH="$env:CRAFT_ROOT" `
            -DCMAKE_INSTALL_PREFIX="$env:BUILD_DIR\install" `
            -DNC_WITH_CRASHREPORTER=OFF `
            "$env:DESKTOP_SRC"

      - name: Build Nextcloud Desktop
        shell: pwsh
        run: |
          cd $env:BUILD_DIR
          cmake --build . --config RelWithDebInfo
          cmake --install . --config RelWithDebInfo

      - name: Package with client-building (MSI optional)
        if: ${{ github.event.inputs.build_msi == 'true' }}
        shell: pwsh
        run: |
          git clone https://github.com/nextcloud/client-building.git $env:CLIENT_BUILDING
          $env:BUILD_INSTALLER = "0"
          $env:BUILD_INSTALLER_MSI = "1"
          if ('${{ github.event.inputs.sign_binaries }}' -eq 'true') {
            $env:USE_CODE_SIGNING = "1"
            $env:WINDOWS_SIGNING_CERT_B64 = "${{ secrets.WINDOWS_SIGNING_CERT_B64 }}"
            $env:WINDOWS_SIGNING_CERT_PASS = "${{ secrets.WINDOWS_SIGNING_CERT_PASS }}"
            $pfx = "$env:RUNNER_TEMP\codesign.pfx"
            [IO.File]::WriteAllBytes($pfx,[Convert]::FromBase64String($env:WINDOWS_SIGNING_CERT_B64))
            $env:CODESIGN_PFX = $pfx
          } else {
            $env:USE_CODE_SIGNING = "0"
          }
          cd $env:CLIENT_BUILDING
          ./build-installer-collect.bat
          ./build-installer-msi.bat

      - name: Gather artifacts
        shell: pwsh
        run: |
          $Out = "${{ github.workspace }}\artifacts"
          New-Item -ItemType Directory -Force -Path $Out | Out-Null
          if (Test-Path "$env:BUILD_DIR\install") {
            7z a -r "$Out\nextcloud-desktop-install-tree.zip" "$env:BUILD_DIR\install\*"
          }
          if (Test-Path "$env:BUILD_DIR\resources\translations") {
            7z a -r "$Out\translations-qm.zip" "$env:BUILD_DIR\resources\translations\*.qm"
          }
          Get-ChildItem -Recurse -Include *.msi -Path "${{ github.workspace }}" | ForEach-Object {
            Copy-Item $_.FullName -Destination $Out
          }

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nextcloud-desktop-windows
          path: artifacts/**
          if-no-files-found: warn
          retention-days: 14
